// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/url"

	"github.com/google/uuid"
)

// GetTaskByIdNotFound is response for GetTaskById operation.
type GetTaskByIdNotFound struct{}

func (*GetTaskByIdNotFound) getTaskByIdRes() {}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUUID returns new OptUUID with value set to v.
func NewOptUUID(v uuid.UUID) OptUUID {
	return OptUUID{
		Value: v,
		Set:   true,
	}
}

// OptUUID is optional uuid.UUID.
type OptUUID struct {
	Value uuid.UUID
	Set   bool
}

// IsSet returns true if OptUUID was set.
func (o OptUUID) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUUID) Reset() {
	var v uuid.UUID
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUUID) SetTo(v uuid.UUID) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUUID) Get() (v uuid.UUID, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUUID) Or(d uuid.UUID) uuid.UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Task
type Task struct {
	ID          OptUUID `json:"id"`
	SiteURL     url.URL `json:"site_url"`
	Condition   string  `json:"condition"`
	DurationDay int32   `json:"duration_day"`
}

// GetID returns the value of ID.
func (s *Task) GetID() OptUUID {
	return s.ID
}

// GetSiteURL returns the value of SiteURL.
func (s *Task) GetSiteURL() url.URL {
	return s.SiteURL
}

// GetCondition returns the value of Condition.
func (s *Task) GetCondition() string {
	return s.Condition
}

// GetDurationDay returns the value of DurationDay.
func (s *Task) GetDurationDay() int32 {
	return s.DurationDay
}

// SetID sets the value of ID.
func (s *Task) SetID(val OptUUID) {
	s.ID = val
}

// SetSiteURL sets the value of SiteURL.
func (s *Task) SetSiteURL(val url.URL) {
	s.SiteURL = val
}

// SetCondition sets the value of Condition.
func (s *Task) SetCondition(val string) {
	s.Condition = val
}

// SetDurationDay sets the value of DurationDay.
func (s *Task) SetDurationDay(val int32) {
	s.DurationDay = val
}

func (*Task) getTaskByIdRes() {}

// UpdateTaskOK is response for UpdateTask operation.
type UpdateTaskOK struct{}
