// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/url"
	"time"

	"github.com/google/uuid"
)

// CrateTaskCreated is response for CrateTask operation.
type CrateTaskCreated struct{}

// DeleteTaskByIDOK is response for DeleteTaskByID operation.
type DeleteTaskByIDOK struct{}

// GetTaskByIDNotFound is response for GetTaskByID operation.
type GetTaskByIDNotFound struct{}

func (*GetTaskByIDNotFound) getTaskByIDRes() {}

// HealthzOK is response for Healthz operation.
type HealthzOK struct{}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTaskRequest returns new OptTaskRequest with value set to v.
func NewOptTaskRequest(v TaskRequest) OptTaskRequest {
	return OptTaskRequest{
		Value: v,
		Set:   true,
	}
}

// OptTaskRequest is optional TaskRequest.
type OptTaskRequest struct {
	Value TaskRequest
	Set   bool
}

// IsSet returns true if OptTaskRequest was set.
func (o OptTaskRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTaskRequest) Reset() {
	var v TaskRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTaskRequest) SetTo(v TaskRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTaskRequest) Get() (v TaskRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTaskRequest) Or(d TaskRequest) TaskRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// PostCronWrpouiqjflsadkmxcvz780923OK is response for PostCronWrpouiqjflsadkmxcvz780923 operation.
type PostCronWrpouiqjflsadkmxcvz780923OK struct{}

// Ref: #/components/schemas/TaskRequest
type TaskRequest struct {
	SiteURL        url.URL `json:"site_url"`
	DurationDay    int     `json:"duration_day"`
	ConditionQuery string  `json:"condition_query"`
	IsPublic       bool    `json:"is_public"`
}

// GetSiteURL returns the value of SiteURL.
func (s *TaskRequest) GetSiteURL() url.URL {
	return s.SiteURL
}

// GetDurationDay returns the value of DurationDay.
func (s *TaskRequest) GetDurationDay() int {
	return s.DurationDay
}

// GetConditionQuery returns the value of ConditionQuery.
func (s *TaskRequest) GetConditionQuery() string {
	return s.ConditionQuery
}

// GetIsPublic returns the value of IsPublic.
func (s *TaskRequest) GetIsPublic() bool {
	return s.IsPublic
}

// SetSiteURL sets the value of SiteURL.
func (s *TaskRequest) SetSiteURL(val url.URL) {
	s.SiteURL = val
}

// SetDurationDay sets the value of DurationDay.
func (s *TaskRequest) SetDurationDay(val int) {
	s.DurationDay = val
}

// SetConditionQuery sets the value of ConditionQuery.
func (s *TaskRequest) SetConditionQuery(val string) {
	s.ConditionQuery = val
}

// SetIsPublic sets the value of IsPublic.
func (s *TaskRequest) SetIsPublic(val bool) {
	s.IsPublic = val
}

// Merged schema.
// Ref: #/components/schemas/TaskResponse
type TaskResponse struct {
	SiteURL        url.URL     `json:"site_url"`
	DurationDay    int         `json:"duration_day"`
	ConditionQuery string      `json:"condition_query"`
	IsPublic       bool        `json:"is_public"`
	ID             uuid.UUID   `json:"id"`
	CreatedAt      time.Time   `json:"created_at"`
	CreatedBy      uuid.UUID   `json:"created_by"`
	UpdatedAt      time.Time   `json:"updated_at"`
	LastCrawledAt  OptDateTime `json:"last_crawled_at"`
	IsPaused       bool        `json:"is_paused"`
}

// GetSiteURL returns the value of SiteURL.
func (s *TaskResponse) GetSiteURL() url.URL {
	return s.SiteURL
}

// GetDurationDay returns the value of DurationDay.
func (s *TaskResponse) GetDurationDay() int {
	return s.DurationDay
}

// GetConditionQuery returns the value of ConditionQuery.
func (s *TaskResponse) GetConditionQuery() string {
	return s.ConditionQuery
}

// GetIsPublic returns the value of IsPublic.
func (s *TaskResponse) GetIsPublic() bool {
	return s.IsPublic
}

// GetID returns the value of ID.
func (s *TaskResponse) GetID() uuid.UUID {
	return s.ID
}

// GetCreatedAt returns the value of CreatedAt.
func (s *TaskResponse) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// GetCreatedBy returns the value of CreatedBy.
func (s *TaskResponse) GetCreatedBy() uuid.UUID {
	return s.CreatedBy
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *TaskResponse) GetUpdatedAt() time.Time {
	return s.UpdatedAt
}

// GetLastCrawledAt returns the value of LastCrawledAt.
func (s *TaskResponse) GetLastCrawledAt() OptDateTime {
	return s.LastCrawledAt
}

// GetIsPaused returns the value of IsPaused.
func (s *TaskResponse) GetIsPaused() bool {
	return s.IsPaused
}

// SetSiteURL sets the value of SiteURL.
func (s *TaskResponse) SetSiteURL(val url.URL) {
	s.SiteURL = val
}

// SetDurationDay sets the value of DurationDay.
func (s *TaskResponse) SetDurationDay(val int) {
	s.DurationDay = val
}

// SetConditionQuery sets the value of ConditionQuery.
func (s *TaskResponse) SetConditionQuery(val string) {
	s.ConditionQuery = val
}

// SetIsPublic sets the value of IsPublic.
func (s *TaskResponse) SetIsPublic(val bool) {
	s.IsPublic = val
}

// SetID sets the value of ID.
func (s *TaskResponse) SetID(val uuid.UUID) {
	s.ID = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *TaskResponse) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}

// SetCreatedBy sets the value of CreatedBy.
func (s *TaskResponse) SetCreatedBy(val uuid.UUID) {
	s.CreatedBy = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *TaskResponse) SetUpdatedAt(val time.Time) {
	s.UpdatedAt = val
}

// SetLastCrawledAt sets the value of LastCrawledAt.
func (s *TaskResponse) SetLastCrawledAt(val OptDateTime) {
	s.LastCrawledAt = val
}

// SetIsPaused sets the value of IsPaused.
func (s *TaskResponse) SetIsPaused(val bool) {
	s.IsPaused = val
}

func (*TaskResponse) getTaskByIDRes() {}
