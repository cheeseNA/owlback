// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"net/url"
	"strings"
	"time"

	"github.com/go-faster/errors"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/codes"
	"go.opentelemetry.io/otel/metric"
	semconv "go.opentelemetry.io/otel/semconv/v1.19.0"
	"go.opentelemetry.io/otel/trace"

	"github.com/ogen-go/ogen/conv"
	ht "github.com/ogen-go/ogen/http"
	"github.com/ogen-go/ogen/otelogen"
	"github.com/ogen-go/ogen/uri"
)

// Invoker invokes operations described by OpenAPI v3 specification.
type Invoker interface {
	// CrateTask invokes crate-task operation.
	//
	// Create Task.
	//
	// POST /tasks
	CrateTask(ctx context.Context, request OptTaskRequest) (CrateTaskRes, error)
	// DeleteTaskByID invokes delete-task-by-id operation.
	//
	// Delete Task by ID.
	//
	// DELETE /tasks/{taskId}
	DeleteTaskByID(ctx context.Context, params DeleteTaskByIDParams) (DeleteTaskByIDRes, error)
	// GetTaskByID invokes get-task-by-id operation.
	//
	// Get Task by ID.
	//
	// GET /tasks/{taskId}
	GetTaskByID(ctx context.Context, params GetTaskByIDParams) (GetTaskByIDRes, error)
	// GetTasks invokes get-tasks operation.
	//
	// Get Tasks.
	//
	// GET /tasks
	GetTasks(ctx context.Context) (GetTasksRes, error)
	// Healthz invokes healthz operation.
	//
	// Get health state.
	//
	// GET /healthz
	Healthz(ctx context.Context) error
	// PostCronWrpouiqjflsadkmxcvz780923 invokes post-cron-wrpouiqjflsadkmxcvz780923 operation.
	//
	// Execute crawl.
	//
	// POST /cron-wrpouiqjflsadkmxcvz780923
	PostCronWrpouiqjflsadkmxcvz780923(ctx context.Context) error
}

// Client implements OAS client.
type Client struct {
	serverURL *url.URL
	baseClient
}

var _ Handler = struct {
	*Client
}{}

func trimTrailingSlashes(u *url.URL) {
	u.Path = strings.TrimRight(u.Path, "/")
	u.RawPath = strings.TrimRight(u.RawPath, "/")
}

// NewClient initializes new Client defined by OAS.
func NewClient(serverURL string, opts ...ClientOption) (*Client, error) {
	u, err := url.Parse(serverURL)
	if err != nil {
		return nil, err
	}
	trimTrailingSlashes(u)

	c, err := newClientConfig(opts...).baseClient()
	if err != nil {
		return nil, err
	}
	return &Client{
		serverURL:  u,
		baseClient: c,
	}, nil
}

type serverURLKey struct{}

// WithServerURL sets context key to override server URL.
func WithServerURL(ctx context.Context, u *url.URL) context.Context {
	return context.WithValue(ctx, serverURLKey{}, u)
}

func (c *Client) requestURL(ctx context.Context) *url.URL {
	u, ok := ctx.Value(serverURLKey{}).(*url.URL)
	if !ok {
		return c.serverURL
	}
	return u
}

// CrateTask invokes crate-task operation.
//
// Create Task.
//
// POST /tasks
func (c *Client) CrateTask(ctx context.Context, request OptTaskRequest) (CrateTaskRes, error) {
	res, err := c.sendCrateTask(ctx, request)
	return res, err
}

func (c *Client) sendCrateTask(ctx context.Context, request OptTaskRequest) (res CrateTaskRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("crate-task"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/tasks"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "CrateTask",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/tasks"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}
	if err := encodeCrateTaskRequest(request, r); err != nil {
		return res, errors.Wrap(err, "encode request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeCrateTaskResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// DeleteTaskByID invokes delete-task-by-id operation.
//
// Delete Task by ID.
//
// DELETE /tasks/{taskId}
func (c *Client) DeleteTaskByID(ctx context.Context, params DeleteTaskByIDParams) (DeleteTaskByIDRes, error) {
	res, err := c.sendDeleteTaskByID(ctx, params)
	return res, err
}

func (c *Client) sendDeleteTaskByID(ctx context.Context, params DeleteTaskByIDParams) (res DeleteTaskByIDRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("delete-task-by-id"),
		semconv.HTTPMethodKey.String("DELETE"),
		semconv.HTTPRouteKey.String("/tasks/{taskId}"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "DeleteTaskByID",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/tasks/"
	{
		// Encode "taskId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "taskId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.TaskId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "DELETE", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeDeleteTaskByIDResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetTaskByID invokes get-task-by-id operation.
//
// Get Task by ID.
//
// GET /tasks/{taskId}
func (c *Client) GetTaskByID(ctx context.Context, params GetTaskByIDParams) (GetTaskByIDRes, error) {
	res, err := c.sendGetTaskByID(ctx, params)
	return res, err
}

func (c *Client) sendGetTaskByID(ctx context.Context, params GetTaskByIDParams) (res GetTaskByIDRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("get-task-by-id"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/tasks/{taskId}"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetTaskByID",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [2]string
	pathParts[0] = "/tasks/"
	{
		// Encode "taskId" parameter.
		e := uri.NewPathEncoder(uri.PathEncoderConfig{
			Param:   "taskId",
			Style:   uri.PathStyleSimple,
			Explode: false,
		})
		if err := func() error {
			return e.EncodeValue(conv.UUIDToString(params.TaskId))
		}(); err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		encoded, err := e.Result()
		if err != nil {
			return res, errors.Wrap(err, "encode path")
		}
		pathParts[1] = encoded
	}
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetTaskByIDResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// GetTasks invokes get-tasks operation.
//
// Get Tasks.
//
// GET /tasks
func (c *Client) GetTasks(ctx context.Context) (GetTasksRes, error) {
	res, err := c.sendGetTasks(ctx)
	return res, err
}

func (c *Client) sendGetTasks(ctx context.Context) (res GetTasksRes, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("get-tasks"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/tasks"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "GetTasks",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/tasks"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeGetTasksResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// Healthz invokes healthz operation.
//
// Get health state.
//
// GET /healthz
func (c *Client) Healthz(ctx context.Context) error {
	_, err := c.sendHealthz(ctx)
	return err
}

func (c *Client) sendHealthz(ctx context.Context) (res *HealthzOK, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("healthz"),
		semconv.HTTPMethodKey.String("GET"),
		semconv.HTTPRouteKey.String("/healthz"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "Healthz",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/healthz"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "GET", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodeHealthzResponse(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}

// PostCronWrpouiqjflsadkmxcvz780923 invokes post-cron-wrpouiqjflsadkmxcvz780923 operation.
//
// Execute crawl.
//
// POST /cron-wrpouiqjflsadkmxcvz780923
func (c *Client) PostCronWrpouiqjflsadkmxcvz780923(ctx context.Context) error {
	_, err := c.sendPostCronWrpouiqjflsadkmxcvz780923(ctx)
	return err
}

func (c *Client) sendPostCronWrpouiqjflsadkmxcvz780923(ctx context.Context) (res *PostCronWrpouiqjflsadkmxcvz780923OK, err error) {
	otelAttrs := []attribute.KeyValue{
		otelogen.OperationID("post-cron-wrpouiqjflsadkmxcvz780923"),
		semconv.HTTPMethodKey.String("POST"),
		semconv.HTTPRouteKey.String("/cron-wrpouiqjflsadkmxcvz780923"),
	}

	// Run stopwatch.
	startTime := time.Now()
	defer func() {
		// Use floating point division here for higher precision (instead of Millisecond method).
		elapsedDuration := time.Since(startTime)
		c.duration.Record(ctx, float64(float64(elapsedDuration)/float64(time.Millisecond)), metric.WithAttributes(otelAttrs...))
	}()

	// Increment request counter.
	c.requests.Add(ctx, 1, metric.WithAttributes(otelAttrs...))

	// Start a span for this request.
	ctx, span := c.cfg.Tracer.Start(ctx, "PostCronWrpouiqjflsadkmxcvz780923",
		trace.WithAttributes(otelAttrs...),
		clientSpanKind,
	)
	// Track stage for error reporting.
	var stage string
	defer func() {
		if err != nil {
			span.RecordError(err)
			span.SetStatus(codes.Error, stage)
			c.errors.Add(ctx, 1, metric.WithAttributes(otelAttrs...))
		}
		span.End()
	}()

	stage = "BuildURL"
	u := uri.Clone(c.requestURL(ctx))
	var pathParts [1]string
	pathParts[0] = "/cron-wrpouiqjflsadkmxcvz780923"
	uri.AddPathParts(u, pathParts[:]...)

	stage = "EncodeRequest"
	r, err := ht.NewRequest(ctx, "POST", u)
	if err != nil {
		return res, errors.Wrap(err, "create request")
	}

	stage = "SendRequest"
	resp, err := c.cfg.Client.Do(r)
	if err != nil {
		return res, errors.Wrap(err, "do request")
	}
	defer resp.Body.Close()

	stage = "DecodeResponse"
	result, err := decodePostCronWrpouiqjflsadkmxcvz780923Response(resp)
	if err != nil {
		return res, errors.Wrap(err, "decode response")
	}

	return result, nil
}
