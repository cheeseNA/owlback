// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CrateTask implements crate-task operation.
	//
	// Create Task.
	//
	// POST /tasks
	CrateTask(ctx context.Context, req OptTaskRequest) error
	// DeleteTaskByID implements delete-task-by-id operation.
	//
	// Delete Task by ID.
	//
	// DELETE /tasks/{taskId}
	DeleteTaskByID(ctx context.Context, params DeleteTaskByIDParams) error
	// GetTaskByID implements get-task-by-id operation.
	//
	// Get Task by ID.
	//
	// GET /tasks/{taskId}
	GetTaskByID(ctx context.Context, params GetTaskByIDParams) (GetTaskByIDRes, error)
	// GetTasks implements get-tasks operation.
	//
	// Get Tasks.
	//
	// GET /tasks
	GetTasks(ctx context.Context) ([]TaskResponse, error)
	// Healthz implements healthz operation.
	//
	// Get health state.
	//
	// GET /healthz
	Healthz(ctx context.Context) error
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
