// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"mime"
	"net/http"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/validate"
)

func decodeCrateTaskResponse(resp *http.Response) (res CrateTaskRes, _ error) {
	switch resp.StatusCode {
	case 201:
		// Code 201.
		return &CrateTaskCreated{}, nil
	case 400:
		// Code 400.
		return &CrateTaskBadRequest{}, nil
	case 401:
		// Code 401.
		return &CrateTaskUnauthorized{}, nil
	case 500:
		// Code 500.
		return &CrateTaskInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeDeleteTaskByIDResponse(resp *http.Response) (res DeleteTaskByIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &DeleteTaskByIDOK{}, nil
	case 401:
		// Code 401.
		return &DeleteTaskByIDUnauthorized{}, nil
	case 404:
		// Code 404.
		return &DeleteTaskByIDNotFound{}, nil
	case 500:
		// Code 500.
		return &DeleteTaskByIDInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeGetTaskByIDResponse(resp *http.Response) (res GetTaskByIDRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response TaskResponse
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 401:
		// Code 401.
		return &GetTaskByIDUnauthorized{}, nil
	case 404:
		// Code 404.
		return &GetTaskByIDNotFound{}, nil
	case 500:
		// Code 500.
		return &GetTaskByIDInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeGetTasksResponse(resp *http.Response) (res GetTasksRes, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		ct, _, err := mime.ParseMediaType(resp.Header.Get("Content-Type"))
		if err != nil {
			return res, errors.Wrap(err, "parse media type")
		}
		switch {
		case ct == "application/json":
			buf, err := io.ReadAll(resp.Body)
			if err != nil {
				return res, err
			}
			d := jx.DecodeBytes(buf)

			var response GetTasksOKApplicationJSON
			if err := func() error {
				if err := response.Decode(d); err != nil {
					return err
				}
				if err := d.Skip(); err != io.EOF {
					return errors.New("unexpected trailing data")
				}
				return nil
			}(); err != nil {
				err = &ogenerrors.DecodeBodyError{
					ContentType: ct,
					Body:        buf,
					Err:         err,
				}
				return res, err
			}
			// Validate response.
			if err := func() error {
				if err := response.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return res, errors.Wrap(err, "validate")
			}
			return &response, nil
		default:
			return res, validate.InvalidContentType(ct)
		}
	case 500:
		// Code 500.
		return &GetTasksInternalServerError{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodeHealthzResponse(resp *http.Response) (res *HealthzOK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &HealthzOK{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}

func decodePostCronWrpouiqjflsadkmxcvz780923Response(resp *http.Response) (res *PostCronWrpouiqjflsadkmxcvz780923OK, _ error) {
	switch resp.StatusCode {
	case 200:
		// Code 200.
		return &PostCronWrpouiqjflsadkmxcvz780923OK{}, nil
	}
	return res, validate.UnexpectedStatusCode(resp.StatusCode)
}
